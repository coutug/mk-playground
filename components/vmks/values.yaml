---
victoria-metrics-operator:
  enabled: true
  serviceMonitor:
    enabled: true

defaultRules:
  create: true
  # rule:
  #   spec:
  #     labels:
  #       team: k8s

vmsingle:
  enabled: false
vmcluster:
  enabled: true
  ingress:
    insert:
      enabled: false
      ingressClassName: nginx-internal
      annotations:
        cert-manager.io/issuer: monitoring-letsencrypt
      hosts:
        - vminsert.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
      tls:
        - hosts:
          - vminsert.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
          secretName: vminsert-tls-cert
    select:
      enabled: false
      ingressClassName: nginx-internal
      annotations:
        cert-manager.io/issuer: monitoring-letsencrypt
      hosts:
        - vmselect.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
      tls:
        - hosts:
          - vmselect.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
          secretName: vmselect-tls-cert
  spec:
    retentionPeriod: "1"
    replicationFactor: 2
    vmstorage:
      replicaCount: 2
      storageDataPath: "/vm-data"
      resources:
        requests:
          cpu: 1
          memory: 2Gi
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: csi-hostpath-sc
            resources:
              requests:
                storage: 5G
      extraArgs:
        dedup.minScrapeInterval: 30s
    
    vmselect:
      replicaCount: 1
      cacheMountPath: "/select-cache"
      resources:
        requests:
          cpu: 1
          memory: 1Gi
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: csi-hostpath-sc
            resources:
              requests:
                storage: 1Gi
      extraArgs:
        dedup.minScrapeInterval: 30s
    
    vminsert:
      replicaCount: 1

alertmanager:
  spec:
    replicaCount: 1
    externalURL: https://alertmanager.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
    disableNamespaceMatcher: true
  config:
    route:
      receiver: "blackhole"
      group_by:
        - "alertgroup"
        - "severity"
        - "cluster"
      group_wait: 30s
      # group_interval: 1m
      # repeat_interval: 2m
      group_interval: 5m
      repeat_interval: 4h
      routes:
        - receiver: "blackhole"
          matchers:
          - alertname="Watchdog"
        - receiver: zd-cluster
          matchers:
          - zen="duty"
        - receiver: zd-cluster
          matchers:
          - zen="duty"
        - receiver: zenduty
          matchers:
          - zen="duty"
          continue: true
        - receiver: "oncall"
          continue: true
    inhibit_rules:
      # Show only highest severity alerts based per name and namespace
      - source_matchers:
        - severity="critical"
        target_matchers:
        - severity=~"warning|info"
        equal:
        - cluster
      - source_matchers:
        - severity="warning"
        target_matchers:
        - severity="info"
        equal:
        - cluster
      # Show prod before dev alerts
      - source_matchers:
        - cluster=~".*(prod|monitor).*"
        target_matchers:
        - cluster!~".*(prod|monitor).*"
        equal:
        - alertgroup
      # Manage infoInhibitor
      - source_matchers:
        - alertname="InfoInhibitor"
        target_matchers:
        - severity="info"
        equal:
        - namespace
      - target_matchers:
        - alertname="InfoInhibitor"
    receivers:
      - name: blackhole
      - name: oncall
        webhook_configs:
          - url: https://oncall.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}/integrations/v1/alertmanager/owtXJIDCh4V4wuvPHYZbiASWZ/
            send_resolved: true
            max_alerts: 100
      - name: zenduty
        webhook_configs:
          - url: https://events.zenduty.com/integration/hy7st/prometheus/5eed231c-127a-42f2-bad3-8d990a11f023/

  ingress:
    enabled: false
    ingressClassName: nginx-internal
    annotations:
      cert-manager.io/issuer: monitoring-letsencrypt
    hosts: 
      - alertmanager.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
    tls:
      - hosts:
        - alertmanager.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
        secretName: alertmanager-tls-cert

vmalert:
  spec:
    extraArgs:
      http.pathPrefix: "/"
      external.alert.source: '{{`explore?left={"datasource":"VictoriaMetrics","queries":[{"expr":{{ .Expr|jsonEscape|queryEscape }},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}`}}'

vmagent:
  spec:
    replicaCount: 1
    scrapeInterval: 30s
    minScrapeInterval: 30s
    scrapeTimeout: 20s
    externalLabels:
      cluster: ${CLUSTER_NAME}
    remoteWriteSettings:
      # The maximum file-based buffer size in bytes at -remoteWrite.tmpDataPath
      maxDiskUsagePerURL: 10737418240 #10Gi
    extraArgs:
      promscrape.streamParse: "true"
      promscrape.dropOriginalLabels: "true"
      promscrape.maxScrapeSize: 100MB
    resources:
      limits:
        cpu: 500m
        memory: 1000Mi
      requests:
        cpu: 200m
        memory: 500Mi
  serviceMonitor:
    enabled: true
  ingress:
    enabled: false
    ingressClassName: nginx-internal
    annotations:
      cert-manager.io/issuer: monitoring-letsencrypt
    hosts: 
      - vmagent-internal.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
    tls:
      - hosts:
        - vmagent-internal.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}
        secretName: vmagent-internal-tls-cert

grafana:
  replicas: 1
  deploymentStrategy:
    type: Recreate
  # admin:
    # existingSecret: flux-grafana-admin
  ingress:
    enabled: false
    ingressClassName: nginx-internal
    annotations:
      cert-manager.io/issuer: monitoring-letsencrypt
    hosts: 
      - "grafana.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}"
    tls:
      - hosts:
        - "grafana.monitor.${CLUSTER_NAME}.${INTERNAL_DOMAIN}"
        secretName: grafana-tls-cert
  grafana.ini:
    log:
      level: debug
    auth:
      managed_service_accounts_enabled: true
    server:
      read_timeout: 240
    dataproxy:
      timeout: 240
    feature_toggles:
      externalServiceAccounts: true
      accessControlOnCall: false
  rbac:
    pspEnabled: false
  sidecar:
    datasources:
      enabled: true
      label: grafana_datasource
      labelValue: "1"
      searchNamespace: ALL
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      folderAnnotation: grafana_folder
      # Allow discovery in all namespaces for dashboards
      searchNamespace: ALL
      multicluster: true
      provider:
        foldersFromFilesStructure: true
    plugins:
      enabled: true
      label: grafana_plugin
      labelValue: "1"
  # required for the latest grafana version, for more info: https://github.com/grafana/helm-charts/issues/2899
  assertNoLeakedSecrets: false

prometheus-node-exporter:
  service:
    port: 9022
    targetPort: metrics
kubelet:
  enabled: true
kubeApiServer:
  enabled: true
# CAPI
kubeControllerManager:
  enabled: false
coreDns:
  enabled: true
# CAPI
kubeEtcd:
  enabled: false
# CAPI
kubeScheduler:
  enabled: false
# replaced by Cilium
kubeProxy:
  enabled: false